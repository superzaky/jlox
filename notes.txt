INTELLIJ
lox config:
main class: interpreter.Lox
program arguments: D:\documents\leerplek\java\jlox\test.txt

astprinter config:
main class: interpreter.AstPrinter

GenerateAst config:
main class: GenerateAst
program arguments: D:\documents\leerplek\java\jlox\src\interpreter

VSCODE
in launch.json you need to some have something like this:
{
    "type": "java",
    "name": "GenerateAst",
    "request": "launch",
    "mainClass": "GenerateAst",
    "projectName": "jlox_58e57d61",
    "args": [
        "D:\\documents\\leerplek\\java\\jlox\\src\\interpreter"
    ],
},

Regarding AstPrinter.java:

expression     → literal
               | unary
               | binary
               | grouping ;

literal        → NUMBER | STRING | "true" | "false" | "nil" ;
grouping       → "(" expression ")" ;
unary          → ( "-" | "!" ) expression ;
binary         → expression operator expression ;
operator       → "==" | "!=" | "<" | "<=" | ">" | ">="
               | "+"  | "-"  | "*" | "/" ;


A parser really has two jobs:

    1.Given a valid sequence of tokens, produce a corresponding syntax tree.

    2.Given an invalid sequence of tokens, detect any errors and tell the user about their mistakes.


New syntax and new grammar rules regarding statements:
program        → statement* EOF ;

statement      → exprStmt
               | printStmt ;

exprStmt       → expression ";" ;
printStmt      → "print" expression ";" ;


Rule for kinds of statements that declare names:
program        → declaration* EOF ;

declaration    → varDecl
               | statement ;

statement      → exprStmt
               | printStmt ;

The rule for declaring a variable looks like:
varDecl        → "var" IDENTIFIER ( "=" expression )? ";" ;

To access a variable, we define a new kind of primary expression:
primary        → "true" | "false" | "nil"
               | NUMBER | STRING
               | "(" expression ")"
               | IDENTIFIER ;

That IDENTIFIER clause matches a single identifier token, which is understood to be the name of the variable being accessed.

Interesting:
The problem is that using a variable isn’t the same as referring to it. You can refer to a variable in a chunk of code without immediately
evaluating it if that chunk of code is wrapped inside a function.


ASSIGNMENT SYNTAX:
expression     → assignment ;
assignment     → IDENTIFIER "=" assignment
               | equality ;


Block syntax and semantics:
statement      → exprStmt
               | printStmt
               | block ;

block          → "{" declaration* "}" ;

IF STATEMENT SYNTAX:
statement      → exprStmt
               | ifStmt
               | printStmt
               | block ;

ifStmt         → "if" "(" expression ")" statement
               ( "else" statement )? ;


LOGICAL OPERATORS
expression     → assignment ;
assignment     → IDENTIFIER "=" assignment
               | logic_or ;
logic_or       → logic_and ( "or" logic_and )* ;
logic_and      → equality ( "and" equality )* ;


WHILE LOOPS
statement      → exprStmt
               | ifStmt
               | printStmt
               | whileStmt
               | block ;

whileStmt      → "while" "(" expression ")" statement ;

We’re down to the last control flow construct, Ye Olde C-style for loop. I probably don’t need to remind you, but it looks like this:
for (var i = 0; i < 10; i = i + 1) print i;

In grammarese, that’s:

statement      → exprStmt
               | forStmt
               | ifStmt
               | printStmt
               | whileStmt
               | block ;

forStmt        → "for" "(" ( varDecl | exprStmt | ";" )
                 expression? ";"
                 expression? ")" statement ;

the unary rule bubble up to a new call rule:
unary          → ( "!" | "-" ) unary | call ;
call           → primary ( "(" arguments? ")" )* ;

The argument list grammar is:
arguments      → expression ( "," expression )* ;


declaration    → funDecl
               | varDecl
               | statement ;

The updated declaration rule references this new rule:
funDecl        → "fun" function ;
function       → IDENTIFIER "(" parameters? ")" block ;

The function itself is a name followed by the parenthesized parameter list and the body. The body is always a braced
block, using the same grammar rule that block statements use. The parameter list uses this rule:
parameters     → IDENTIFIER ( "," IDENTIFIER )* ;


Grammar for return statements:
statement      → exprStmt
               | forStmt
               | ifStmt
               | printStmt
               | returnStmt
               | whileStmt
               | block ;

returnStmt     → "return" expression? ";" ;

The new classDecl rule relies on the function rule we defined earlier: 
declaration    → classDecl
               | funDecl
               | varDecl
               | statement ;

classDecl      → "class" IDENTIFIER "{" function* "}" ;

