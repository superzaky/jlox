Regarding AstPrinter.java:

expression     → literal
               | unary
               | binary
               | grouping ;

literal        → NUMBER | STRING | "true" | "false" | "nil" ;
grouping       → "(" expression ")" ;
unary          → ( "-" | "!" ) expression ;
binary         → expression operator expression ;
operator       → "==" | "!=" | "<" | "<=" | ">" | ">="
               | "+"  | "-"  | "*" | "/" ;


A parser really has two jobs:

    1.Given a valid sequence of tokens, produce a corresponding syntax tree.

    2.Given an invalid sequence of tokens, detect any errors and tell the user about their mistakes.


New syntax and new grammar rules regarding statements:
program        → statement* EOF ;

statement      → exprStmt
               | printStmt ;

exprStmt       → expression ";" ;
printStmt      → "print" expression ";" ;


Rule for kinds of statements that declare names:
program        → declaration* EOF ;

declaration    → varDecl
               | statement ;

statement      → exprStmt
               | printStmt ;

The rule for declaring a variable looks like:
varDecl        → "var" IDENTIFIER ( "=" expression )? ";" ;

To access a variable, we define a new kind of primary expression:
primary        → "true" | "false" | "nil"
               | NUMBER | STRING
               | "(" expression ")"
               | IDENTIFIER ;

That IDENTIFIER clause matches a single identifier token, which is understood to be the name of the variable being accessed.

Interesting:
The problem is that using a variable isn’t the same as referring to it. You can refer to a variable in a chunk of code without immediately
evaluating it if that chunk of code is wrapped inside a function.


ASSIGNMENT SYNTAX:
expression     → assignment ;
assignment     → IDENTIFIER "=" assignment
               | equality ;


Block syntax and semantics:
statement      → exprStmt
               | printStmt
               | block ;

block          → "{" declaration* "}" ;

